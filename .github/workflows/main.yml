name: main.yml

on:
  pull_request:
    types: [ opened, reopened, assigned ]
    branches: [ main ]
  push:
    branches: 
      - 'feature'
    paths:
      - 'src/App.js'
    
env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ${{ secrets.AWS_REGION }}
  
jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [12.x]
        
    steps:
    - uses: actions/checkout@v3

    - name: Install dependencies
      run: npm install
      
    - name: Build
      run: npm run build
    
    - uses: jwalton/gh-find-current-pr@v1
      id: findPr
      with:
#       Can be "open", "closed", or "all".  Defaults to "open".
          state: open
#       This will echo "Your PR is 7", or be skipped if there is no current PR.
    - run: echo "Your PR is ${PR}"
      if: success() && steps.findPr.outputs.number
      env:
        PR: ${{ steps.findPr.outputs.number }}    
        
    - id: get-id 
      run: |
          id=$(echo ${{ github.event.pull_request.title }} | cut -d ' ' -f 1,2 --output-delimiter='-')
          echo "::set-output name=id::$id" 
      if: ${{ github.event_name == 'pull_request' }}
      
    - run: echo "${{steps.get-id.outputs.id}}"
      if: ${{ github.event_name == 'pull_request' }}    
        
    - id: step1
      run: echo "::set-output name=test::trial-fe-pr-${{ steps.findPr.outputs.number }}-env.react-frontend-s3.indium-poc.co.in" 
      
    - uses: jakejarvis/s3-sync-action@master
      with:
        args: --acl public-read --follow-symlinks --delete
      env:
        AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: 'ap-south-1'   
        SOURCE_DIR: 'build'  
        DEST_DIR: ${{ steps.findPr.outputs.number }}

    - run: |
        aws cloudfront create-distribution --origin-domain-name resultscx-poc-s3-deployment-dynamic-url.s3.ap-south-1.amazonaws.com --default-root-object index.html > create_distribution.json
        sudo apt-get install jq
        cat create_distribution.json
        echo "------------------"
        echo " "
        export ETAG=`cat create_distribution.json | jq '.ETag' | tr -d \"`
        export DISTRIBUTION_ID=`cat create_distribution.json | jq '.Distribution.Id' | tr -d \"`
        export DOMAIN_NAME=`cat create_distribution.json | jq '.Distribution.DomainName' | tr -d \"`
        export ORIGIN_ID=`cat create_distribution.json | jq '.Distribution.DistributionConfig.Origins.Items[0].Id' | tr -d \"`
        export ORIGIN_PATH=`cat create_distribution.json | jq '.Distribution.DistributionConfig.Origins.Items.OriginPath' | tr -d \"`
        echo "$ETAG, $DISTRIBUTION_ID, $DOMAIN_NAME, $ORIGIN_ID, $ORIGIN_PATH"
        export NEW_ORIGIN_PATH="/${{ steps.findPr.outputs.number }}"
        cat create_distribution.json | jq --arg targetOriginId $ORIGIN_ID --arg newOriginPath $NEW_ORIGIN_PATH '.Distribution.DistributionConfig | .Origins.Items = (.Origins.Items | map(if (.Id == $targetOriginId) then (.OriginPath = $newOriginPath) else . end))' > update_distribution.json
        echo "------------------------"
        cat update_distribution.json
        echo "------------------------"
        echo " "
        aws cloudfront get-distribution --id $DISTRIBUTION_ID
        #sleep 120
        aws cloudfront update-distribution --id $DISTRIBUTION_ID --if-match $ETAG --distribution-config "file://update_distribution.json"
        #sleep 120
        aws cloudfront get-distribution --id $DISTRIBUTION_ID
        aws cloudfront create-invalidation --distribution-id $DISTRIBUTION_ID --paths "/*"
        echo "rr_value=$(echo $DOMAIN_NAME)" >> $GITHUB_ENV
        echo "CF-DIST=$(echo $DISTRIBUTION_ID)" >> $GITHUB_ENV
      if: ${{ github.event_name == 'pull_request' }}
              
    - run: aws cloudfront create-invalidation --distribution-id $CF_DIST_${{ steps.findPr.outputs.number }} --paths "/*"
      if: ${{ github.event_name != 'pull_request' }}
      
    - run: echo "CF domain name is $rr_value"
    
    - name: "Create an A record set"
      uses: Roosterfish/aws-route53-record-set-action@master
      with: 
        aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws_route53_hosted_zone_id: ${{ secrets.AWS_ROUTE53_HOSTED_ZONE_ID }}
        aws_route53_rr_action: "UPSERT"
        aws_route53_rr_name: ${{ steps.step1.outputs.test }}
        aws_route53_rr_type: "CNAME"
        aws_route53_rr_ttl: "300"
        aws_route53_rr_value: ${{ env.rr_value }}
      if: ${{ github.event_name == 'pull_request' }}
        
    - name: Add Tag to GitHub
      id: tag_version
      uses: mathieudutour/github-tag-action@v6.0
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Create a GitHub release
      uses: ncipollo/release-action@v1
      with:
        tag: ${{ steps.tag_version.outputs.new_tag }}
        name: Release ${{ steps.tag_version.outputs.new_tag }}
        body: ${{ steps.tag_version.outputs.changelog }}
        
    - name: Jira Login
      uses: atlassian/gajira-login@master
      env:
        JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}
        JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}
        JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}

# To Fetch Commit id From PUSH (PULL NEED TO CHECK)

#     - name: Find in commit messages
#       uses: atlassian/gajira-find-issue-key@master
#       with:
#         from: commits
#       if: ${{ github.event_name != 'pull_request' }}

# To extract Jira ISSUE from config file

#     - id: step2
#       run: |
#         if ${{ github.event_name != 'pull_request' }}
#         then
#           tail -1 /home/ubuntu/jira/config.yml > /home/ubuntu/jira.txt
#           issuekey=`cat /home/ubuntu/jira.txt`
#           echo ${issuekey:7} > jira.txt
#           jiraissue=`cat /home/ubuntu/jira.txt`
#           echo "::set-output name=test::${jiraissue}"
#         else
#           echo "::set-output name=test::${{steps.get-id.outputs.id}}"
#         fi

# To Get Issue ID from PULL/PUSH 

    - id: get-id1
      run: |
          id=${{steps.get-id.outputs.id}}
          echo "::set-output name=id::$id"
      if: ${{ github.event_name == 'pull_request' }}

    - run: echo "${{steps.get-id1.outputs.id}}"
      if: ${{ github.event_name == 'pull_request' }}
    
#     - name: Log created issue
#       run: echo "Issue ${{steps.get-id1.outputs.id}} was created"

    - run: export CF_DIST_${{ steps.findPr.outputs.number }}=${{ env.CF-DIST }}
      if: ${{ github.event_name == 'pull_request' }}    
      
    - name: Comment on issue
      uses: atlassian/gajira-comment@master
      with:
        issue: ${{steps.get-id1.outputs.id}}
        comment: Testing URL is http://${{ steps.step1.outputs.test }}
      if: ${{ github.event_name == 'pull_request' }}
        
    - name: Slack Notification
      uses: act10ns/slack@v1
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      with: 
        status: ${{ job.status }}
        notify_when: 'failure'
        channel: '#results-cx'
        #message: Deployed {{ env.GITHUB_REF_NAME }} branch Successfully
      if: always()
